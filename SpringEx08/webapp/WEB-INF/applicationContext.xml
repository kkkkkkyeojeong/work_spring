<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan base-package="com.koitt"></context:component-scan>
	
	
	<sec:http auto-config="true" use-expressions="true">
		<sec:intercept-url pattern="/" access="permitAll" />
		<sec:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/board/**" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" />
		
		<sec:form-login login-page="/login.do" 
					login-processing-url="/login-processing"
					authentication-failure-url="/login.do?error=login"
					username-parameter="email"
					password-parameter="password" />
		
		<sec:access-denied-handler error-page="/access-denied.do" />
		<sec:csrf />			
	</sec:http>
	
	<!-- 비밀번호 암호화 하기 위해 빈 객체 선언 -->
	<bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	</bean>
	
	<!-- 인증 처리를 위한 클래스 지정 -->
	<sec:authentication-manager>
		<sec:authentication-provider user-service-ref="customUserDetailsService">
			<sec:password-encoder ref="bcryptEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>
	
	
	<!-- 데이터베이스 설정 값을 저장한 jdbc.properties 파일을 불러오기 -->
	<context:property-placeholder location="/WEB-INF/jdbc.propertise" />
	
	<!-- 불러온 데이터베이스 설정 값을 이용하여 DataSource 빈 객체에 설정 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" 	value="${jdbc.driverClassName}" />
		<property name="url" 				value="${jdbc.url}" />
		<property name="username"			value="${jdbc.username}" />
		<property name="password" 			value="${jdbc.password}" />
		<property name="maxActive" 			value="${jdbc.maxActive}" />
	</bean>
	
	<!-- 트랜젝션 처리를 위해 TransactionManager 빈 객체 생성 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 
		트랜젝션 관련 애노테이션 사용하기 위해 설정 
		(위에서 만든 TransactionManager 빈 객체를 transaction-manager 속성에 설정)
	 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- MyBatis 사용 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="/WEB-INF/mybatis.xml"></property>
		<property name="mapperLocations">
			<array>
				<value>/WEB-INF/mapper-*.xml</value>
			</array>
		</property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>


</beans>
